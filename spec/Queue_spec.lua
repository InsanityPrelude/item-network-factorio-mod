local Queue = require('Queue')

describe('Queue', function()
  it('create a queue, push a few values and then pop them off', function()
    local queue = Queue.new()
    assert.are.same(Queue.pop(queue), nil)
    assert.are.same(queue.size, 0)
    assert.are.same(Queue.get_front(queue), nil)

    Queue.push(queue, 'stuff')
    Queue.push(queue, 'and')
    Queue.push(queue, 'things')

    assert.are.same(Queue.get_front(queue), 'stuff')
    assert.are.same(Queue.pop(queue), 'stuff')
    assert.are.same(Queue.get_front(queue), 'and')
    assert.are.same(Queue.pop(queue), 'and')
    assert.are.same(Queue.get_front(queue), 'things')
    assert.are.same(Queue.pop(queue), 'things')

    Queue.push(queue, 'stuff')
    Queue.push(queue, 'and')
    Queue.push(queue, 'things')

    assert.are.same(Queue.pop(queue), 'stuff')
    assert.are.same(Queue.pop(queue), 'and')
    assert.are.same(Queue.pop(queue), 'things')

    Queue.push(queue, 'A')
    Queue.push(queue, 'B')
    Queue.push(queue, 'C')
    Queue.push(queue, 'D')

    assert.are.same(Queue.pop(queue), 'A')
    Queue.push(queue, 'E')
    assert.are.same(Queue.pop(queue), 'B')
    Queue.push(queue, 'F')
    assert.are.same(Queue.pop(queue), 'C')
    Queue.push(queue, 'G')
    assert.are.same(Queue.pop(queue), 'D')
    Queue.push(queue, 'H')
    Queue.push(queue, 'I')
    assert.are.same(Queue.pop(queue), 'E')
    assert.are.same(Queue.pop(queue), 'F')
    assert.are.same(Queue.pop(queue), 'G')
    assert.are.same(Queue.pop(queue), 'H')
    assert.are.same(Queue.pop(queue), 'I')
  end)
end)
